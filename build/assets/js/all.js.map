{"version":3,"sources":["categories/actions.js","categories/categories.js","main/ShowPages.js","products/products.js","products/productsActions.js"],"names":["fetchCategories","categoriesHtml","fetch","method","then","res","json","responseJson","categories","map","category","id","name","categoryImage","document","getElementById","innerHTML","console","log","showForm","action","htmlForm","buttonString","inputString","nameString","imageString","createCategory","categoryName","value","categoryId","imageIdElement","packet","FormData","append","files","body","getCategory","url","length","categoryHtml","catch","err","deleteCategory","updateCategory","categoryNameUpdated","headers","Content-Type","JSON","stringify","propName","deleteCategoryById","options","Array","from","getElementsByClassName","option","addEventListener","event","callAction","optionId","cards","card","showPage","pageName","window","location","pathname","IPP","optionsProduct","callActionProduct","fetchProducts","showFormProduct","productsHtml","products","product","rawPrice","price","code","color","description","stockCount","expirationDate","idString","rawPriceString","priceString","codeString","colorString","categoryIdString","descriptionString","stockCountString","expirationDateString","createProduct","idInput","nameInput","rawPriceInput","priceInput","codeInput","colorInput","categoryIdInput","descriptionInput","stockCountInput","expirationDateInput","getProduct","productId","productHtml","deleteProduct","updateProduct","productIdElement","propertyNameElement","propertyValueElement","propertyName","propertyValue"],"mappings":"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","file":"all.js","sourcesContent":["const fetchCategories = () => {\r\n    let categoriesHtml = \"\";\r\n    const url = `http://localhost:4000/category`;\r\n    fetch(url, { method: 'get' })\r\n        .then(res => res.json())\r\n        .then((responseJson) => {\r\n        responseJson.categories.map((category) => {\r\n            categoriesHtml += `<div class=\"category-content category-container \" id=\"${category.id}\">\r\n                <div>\r\n   ${category.name}\r\n   <i class='fa fa-trash fa-1x trash-icon' aria-hidden='true' onclick='deleteCategoryById(this.parentElement.id)'></i>\r\n   </div>\r\n   <div>\r\n   <img src=\"http://localhost:4000/${category.categoryImage}\" width=\"200\" height=\"150\">\r\n   </div>\r\n   </div>`;\r\n        });\r\n    }).then(() => {\r\n        document.getElementById('categories').innerHTML = categoriesHtml;\r\n        console.log(categoriesHtml);\r\n    });\r\n};\r\nconst showForm = (action) => {\r\n    let htmlForm = \"\";\r\n    let buttonString = \"\";\r\n    let inputString = \"\";\r\n    let nameString = \"\";\r\n    let imageString = \"\";\r\n    switch (action) {\r\n        case 'create':\r\n            inputString = ``;\r\n            nameString = ` <input class=\"input\" placeholder=\"Category Name\" id=\"category-input\">`;\r\n            nameString = ` <input class=\"input\" placeholder=\"Category Name\" id=\"category-input\">`;\r\n            imageString = ` <input class=\"input-image\" type = \"file\" id=\"category-image\" accept='image/*'>`;\r\n            buttonString = `<button class=\"create-button\" onclick='createCategory()'>Create Category</button>`;\r\n            break;\r\n        case 'get':\r\n            buttonString = `<button class=\"create-button\" onclick='getCategory()'>Get Category</button>`;\r\n            break;\r\n        case 'delete':\r\n            buttonString = `<button class=\"create-button\" onclick='deleteCategory()'>Delete Category</button>`;\r\n            break;\r\n        case 'update':\r\n            inputString = `<input class=\"input\" placeholder=\"Updated Name\" id=\"category-input-updated\">`;\r\n            buttonString = `<button class=\"create-button\" onclick='updateCategory()'>Update Category</button>`;\r\n            break;\r\n    }\r\n    htmlForm = ` <div class=\"content container-form\" id=\"container\">\r\n    <input class=\"input\" placeholder=\"Category ID\" id=\"category-id\">\r\n    ${nameString}\r\n    ${inputString}\r\n    ${imageString}\r\n    ${buttonString}\r\n</div>`;\r\n    let container = document.getElementById('result');\r\n    container.innerHTML = htmlForm;\r\n};\r\nconst createCategory = () => {\r\n    let inputNameElement = document.getElementById('category-input');\r\n    let categoryName = inputNameElement.value;\r\n    let inputIdElement = document.getElementById('category-id');\r\n    let categoryId = inputIdElement.value;\r\n    let imageIdElement = document.getElementById('category-image');\r\n    let categoryImage = imageIdElement.value;\r\n    const packet = new FormData();\r\n    packet.append(\"name\", categoryName);\r\n    packet.append(\"id\", categoryId);\r\n    packet.append(\"categoryImage\", imageIdElement.files[0]);\r\n    fetch(`http://localhost:4000/category`, {\r\n        method: 'post',\r\n        body: packet\r\n    }).then(() => {\r\n        fetchCategories();\r\n    });\r\n};\r\nconst getCategory = () => {\r\n    let idElement = document.getElementById('category-id');\r\n    let id = idElement.value;\r\n    let url = `http://localhost:4000/category/${id}`;\r\n    console.log(url);\r\n    fetch(url, { method: 'GET' }).\r\n        then((res) => {\r\n        return res.json();\r\n    }).then((responseJson) => {\r\n        if (responseJson.category.length === 0) {\r\n            return;\r\n        }\r\n        let categoryHtml = \"\";\r\n        categoryHtml = `<div class=\"category-content category-container \" id=\"${responseJson.category[0].id}\">\r\n                <div>\r\n   ${responseJson.category[0].name}\r\n   <i class='fa fa-trash fa-1x trash-icon' aria-hidden='true' onclick='deleteCategoryById(this.parentElement.id)'></i>\r\n   </div>\r\n   <div>\r\n   <img src=\"http://localhost:4000/${responseJson.category[0].categoryImage}\" width=\"200\" height=\"150\">\r\n   </div>\r\n   </div>`;\r\n        ;\r\n        document.getElementById('categories').innerHTML = categoryHtml;\r\n    }).\r\n        catch((err) => {\r\n        console.log(err);\r\n    });\r\n};\r\nconst deleteCategory = () => {\r\n    let inputElement = document.getElementById('category-id');\r\n    let categoryId = inputElement.value;\r\n    const url = `http://localhost:4000/category/${categoryId}`;\r\n    fetch(url, { method: 'DELETE' }).then(() => {\r\n        fetchCategories();\r\n    });\r\n};\r\nconst updateCategory = () => {\r\n    let inputElement = document.getElementById('category-id');\r\n    let categoryId = inputElement.value;\r\n    let inputElementUpdated = document.getElementById('category-input-updated');\r\n    let categoryNameUpdated = inputElementUpdated.value;\r\n    const url = `http://localhost:4000/category/${categoryId}`;\r\n    fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify([{\r\n                propName: \"name\",\r\n                value: `${categoryNameUpdated}`\r\n            }])\r\n    }).then(() => {\r\n        fetchCategories();\r\n    });\r\n};\r\nconst deleteCategoryById = (id) => {\r\n    const url = `http://localhost:4000/category/${id}`;\r\n    fetch(url, { method: 'DELETE' }).then(() => {\r\n        fetchCategories();\r\n    });\r\n};\r\n//# sourceMappingURL=actions.js.map","let options = Array.from(document.getElementsByClassName(\"option\"));\r\noptions.map((option) => {\r\n    option.addEventListener(\"click\", (event) => {\r\n        callAction(option.id);\r\n    });\r\n});\r\nconst callAction = (optionId) => {\r\n    switch (optionId) {\r\n        case 'option1':\r\n            fetchCategories();\r\n            break;\r\n        case 'option2':\r\n            showForm('create');\r\n            break;\r\n        case 'option3':\r\n            showForm('get');\r\n            break;\r\n        case 'option4':\r\n            showForm('delete');\r\n            break;\r\n        case 'option5':\r\n            showForm('update');\r\n            break;\r\n    }\r\n};\r\n//# sourceMappingURL=categories.js.map","const cards = Array.from(document.getElementsByClassName(\"card\"));\r\ncards.map((card) => {\r\n    card.addEventListener(\"click\", (event) => {\r\n        showPage(card.id);\r\n    });\r\n});\r\nconst showPage = (pageName) => {\r\n    window.location.pathname = `/public/${pageName}.html`;\r\n};\r\n//# sourceMappingURL=ShowPages.js.map","const IPP = `192.168.31.212`;\r\nlet optionsProduct = Array.from(document.getElementsByClassName(\"products-option\"));\r\noptionsProduct.map((option) => {\r\n    option.addEventListener(\"click\", (event) => {\r\n        callActionProduct(option.id);\r\n    });\r\n});\r\nconst callActionProduct = (optionId) => {\r\n    switch (optionId) {\r\n        case 'products-option1':\r\n            fetchProducts();\r\n            break;\r\n        case 'products-option2':\r\n            showFormProduct('create');\r\n            break;\r\n        case 'products-option3':\r\n            showFormProduct('get');\r\n            break;\r\n        case 'products-option4':\r\n            showFormProduct('delete');\r\n            break;\r\n        case 'products-option5':\r\n            showFormProduct('update');\r\n            break;\r\n    }\r\n};\r\n//# sourceMappingURL=products.js.map","const fetchProducts = () => {\r\n    const url = `http://localhost:4000/product`;\r\n    fetch(url, {\r\n        method: 'GET'\r\n    }).then((res) => {\r\n        return res.json();\r\n    }).then((responseJson) => {\r\n        let productsHtml = ``;\r\n        responseJson.products.map((product) => {\r\n            productsHtml += `<div class = 'product'>\r\n    <div>\r\n    <span class='field'>ID:</span><span>${product.id}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Name:</span><span>${product.name}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Raw Price:</span><span>${product.rawPrice}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Price:</span><span>${product.price}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Code:</span><span>${product.code}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Color:</span><span>${product.color}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Category ID:</span><span>${product.category}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Description:</span><span>${product.description}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Stock Count:</span><span>${product.stockCount}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Expiration Date:</span><span>${product.expirationDate}</span>\r\n    </div>\r\n    </div>`;\r\n        });\r\n        document.getElementById('products').innerHTML =\r\n            `<div class = 'products'>\r\n    ${productsHtml}\r\n    </div>\r\n    `;\r\n    });\r\n};\r\nconst showFormProduct = (action) => {\r\n    let htmlForm = \"\";\r\n    let buttonString = \"\";\r\n    switch (action) {\r\n        case 'create':\r\n            let idString = \"\";\r\n            let inputString = \"\";\r\n            let rawPriceString = \"\";\r\n            let priceString = \"\";\r\n            let codeString = \"\";\r\n            let colorString = \"\";\r\n            let categoryIdString = \"\";\r\n            let descriptionString = \"\";\r\n            let stockCountString = \"\";\r\n            let expirationDateString = \"\";\r\n            inputString = `<input class=\"products-input\" placeholder=\"Product Name\" id=\"product-name\">`;\r\n            buttonString = `<button class=\"products-create-button\" onclick='createProduct()'>Create Product</button>`;\r\n            idString = `<input class=\"products-input\" placeholder=\"Product ID\" id=\"product-id\">`;\r\n            rawPriceString = `<input class=\"products-input\" placeholder=\"Raw Price\" id=\"product-raw-price\">`;\r\n            priceString = `<input class=\"products-input\" placeholder=\"Price\" id=\"product-price\">`;\r\n            codeString = `<input class=\"products-input\" placeholder=\"Code\" id=\"product-code\">`;\r\n            colorString = `<input class=\"products-input\" placeholder=\"Color\" id=\"product-color\">`;\r\n            categoryIdString = `<input class=\"products-input\" placeholder=\"Category ID\" id=\"product-category-id\">`;\r\n            descriptionString = `<input class=\"products-input\" placeholder=\"Description\" id=\"product-description\">`;\r\n            stockCountString = `<input class=\"products-input\" placeholder=\"Stock Count\" id=\"product-stock-count\">`;\r\n            expirationDateString = `<input class=\"products-input\" placeholder=\"Expiration Date\" id=\"product-expiration-date\">`;\r\n            htmlForm = ` <div class=\"products-content products-container-form ${action === 'create' ? 'create-form' : ''}\" id=\"products-container\">\r\n            ${idString}\r\n            ${inputString}\r\n            ${rawPriceString}\r\n            ${priceString}\r\n            ${codeString}\r\n            ${colorString}\r\n            ${categoryIdString}\r\n            ${descriptionString}\r\n            ${stockCountString}\r\n            ${expirationDateString}\r\n            ${buttonString}\r\n        </div>`;\r\n            break;\r\n        case 'get':\r\n            buttonString = `<button class=\"products-create-button\" onclick='getProduct()'>Get Product</button>`;\r\n            htmlForm = ` <div class=\"products-content products-container-box\" id=\"products-container\">\r\n            <input class=\"products-input\" placeholder=\"Product ID\" id=\"product-id\">\r\n            ${buttonString}\r\n        </div>`;\r\n            break;\r\n        case 'delete':\r\n            buttonString = `<button class=\"products-create-button\" onclick='deleteProduct()'>Delete Product</button>`;\r\n            htmlForm = ` <div class=\"products-content products-container-box\" id=\"products-container\">\r\n            <input class=\"products-input\" placeholder=\"Product ID\" id=\"product-id\">\r\n            ${buttonString}\r\n        </div>`;\r\n            break;\r\n        case 'update':\r\n            let propertyName = `<input class=\"products-input\" placeholder=\"Property Name\" id=\"property-name\">`;\r\n            let propertyValue = `<input class=\"products-input\" placeholder=\"Property Value\" id=\"property-value\">`;\r\n            buttonString = `<button class=\"products-create-button\" onclick='updateProduct()'>Update Product</button>`;\r\n            htmlForm = ` <div class=\"products-content products-container-box\" id=\"products-container\">\r\n            <input class=\"products-input\" placeholder=\"Product ID\" id=\"product-id\">\r\n            ${propertyName}\r\n            ${propertyValue}\r\n            ${buttonString}\r\n        </div>`;\r\n            break;\r\n    }\r\n    document.getElementById('products-result').innerHTML = htmlForm;\r\n};\r\nconst createProduct = () => {\r\n    let idInput = document.getElementById('product-id');\r\n    let nameInput = document.getElementById('product-name');\r\n    let rawPriceInput = document.getElementById('product-raw-price');\r\n    let priceInput = document.getElementById('product-price');\r\n    let codeInput = document.getElementById('product-code');\r\n    let colorInput = document.getElementById('product-color');\r\n    let categoryIdInput = document.getElementById('product-category-id');\r\n    let descriptionInput = document.getElementById('product-description');\r\n    let stockCountInput = document.getElementById('product-stock-count');\r\n    let expirationDateInput = document.getElementById('product-expiration-date');\r\n    const url = `http://localhost:4000/product`;\r\n    fetch(url, { method: 'POST',\r\n        body: JSON.stringify({\r\n            id: idInput.value,\r\n            name: nameInput.value,\r\n            rawPrice: rawPriceInput.value,\r\n            price: priceInput.value,\r\n            code: codeInput.value,\r\n            category: categoryIdInput.value,\r\n            color: colorInput.value,\r\n            description: descriptionInput.value,\r\n            stockCount: stockCountInput.value,\r\n            expirationDate: expirationDateInput.value\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        } }).then((res) => {\r\n        return res.json();\r\n    }).then(() => {\r\n        fetchProducts();\r\n    });\r\n};\r\nconst getProduct = () => {\r\n    const productIdElement = document.getElementById('product-id');\r\n    const productId = productIdElement.value;\r\n    const url = `http://localhost:4000/product/${productId}`;\r\n    fetch(url, {\r\n        method: 'GET'\r\n    }).then((res) => {\r\n        return res.json();\r\n    }).then((responseJson) => {\r\n        let productHtml = ``;\r\n        productHtml = `<div class = 'product'>\r\n    <div>\r\n    <span class='field'>ID:</span><span>${responseJson.product[0].id}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Name:</span><span>${responseJson.product[0].name}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Raw Price:</span><span>${responseJson.product[0].rawPrice}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Price:</span><span>${responseJson.product[0].price}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Code:</span><span>${responseJson.product[0].code}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Color:</span><span>${responseJson.product[0].color}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Category ID:</span><span>${responseJson.product[0].categoryId}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Description:</span><span>${responseJson.product[0].description}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Stock Count:</span><span>${responseJson.product[0].stockCount}</span>\r\n    </div>\r\n    <div>\r\n    <span class='field'>Expiration Date:</span><span>${responseJson.product[0].expirationDate}</span>\r\n    </div>\r\n    </div>`;\r\n        document.getElementById('products').innerHTML =\r\n            `<div class = 'products'>\r\n    ${productHtml}\r\n    </div>\r\n    `;\r\n    });\r\n};\r\nconst deleteProduct = () => {\r\n    const productIdElement = document.getElementById('product-id');\r\n    const productId = productIdElement.value;\r\n    const url = `http://localhost:4000/product/${productId}`;\r\n    fetch(url, {\r\n        method: 'DELETE'\r\n    }).then((res) => {\r\n        return res.json();\r\n    }).then(() => {\r\n        fetchProducts();\r\n    });\r\n};\r\nconst updateProduct = () => {\r\n    const productIdElement = document.getElementById('product-id');\r\n    const propertyNameElement = document.getElementById('property-name');\r\n    const propertyValueElement = document.getElementById('property-value');\r\n    const productId = productIdElement.value;\r\n    const propertyName = propertyNameElement.value;\r\n    const propertyValue = propertyValueElement.value;\r\n    const url = `http://localhost:4000/product/${productId}`;\r\n    fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify([{\r\n                propName: propertyName,\r\n                value: propertyValue\r\n            }])\r\n    }).then((res) => {\r\n        return res.json();\r\n    }).then(() => {\r\n        fetchProducts();\r\n    });\r\n};\r\n//# sourceMappingURL=productsActions.js.map"]}